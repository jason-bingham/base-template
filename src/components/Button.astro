---
const { href, type = "cta", position = "center" } = Astro.props;
let Tag = "button";
if (href) {
  Tag = "a";
}
---

<Tag {href} data-type={type} data-position={position}>
  <slot />
</Tag>

<style lang="scss">
  @use "../styles/abstracts/" as *;

  a,
  button {
    display: block;
    cursor: pointer;
    text-decoration: none;
    line-height: 1;
    border: 0;
    font-family: $ff-serif;
    font-size: size(20);
    padding: 0.5em 1em;
    border-radius: 0.5em;

    transition: 275ms ease;

    &[data-type="cta"] {
      background-color: $d-background;
      color: $d-color;
      box-shadow:
        inset -0.25em -0.25em 0.25em rgba(clr(neutral, 800), 0.2),
        inset 0.25em 0.25em 0.25em rgba(clr(neutral, 100), 0.4);
      &:is(:hover, :focus) {
        background: darken($d-background, 10%);
        color: darken($d-color, 10%);
        box-shadow:
          inset -0.25em -0.25em 0.25em rgba(clr(neutral, 100), 0.2),
          inset 0.15em 0.15em 0.25em rgba(clr(neutral, 800), 0.4);
      }
    }

    &[data-type="secondary"] {
      font-family: $ff-base;
      background-color: rgba(clr(neutral, 100), 0.2);
      color: $d-color;
      outline: 1px solid $d-color;
      padding: 0.25em 0.5em;
      box-shadow:
        inset -0.25em -0.25em 0.25em rgba($d-color, 0.2),
        inset 0.25em 0.25em 0.25em rgba(clr(neutral, 100), 0.8);
      &:is(:hover, :focus) {
        box-shadow:
          inset -0.25em -0.25em 0.25em rgba(clr(neutral, 100), 0.2),
          inset 0.25em 0.25em 0.25em rgba($d-color, 0.2);
      }
    }

    &[data-type="info"] {
      --outline-size: 4px;
      background-color: transparent;
      outline: var(--outline-size) solid clr(neutral, 900);
      outline-offset: calc(var(--outline-size) * -1);
      color: clr(primary, 400);
    }
  }

  button[data-position="center"] {
    margin-inline: auto;
  }

  button[data-position="left"] {
    margin-right: auto;
  }

  button[data-position="right"] {
    margin-left: auto;
  }
</style>
